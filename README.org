#+title: Actividad Integradora 1

* Funcion Z
*Complejidad O(N+M)*
Busqueda de patrones en un texto
Busqueda de patrones en un texto
- Patrón long M
- Patrón long N

Tradicional: O(NM)
    N~M --> O(N^2)
KMP: O(N+M) --> O(2N) =- O(N)

Función Z:
    * Guardar la longitud de la subcadena más larga comenzando en la posición i
    * La subcadena también es un prefijo de la cadena original


indice:  0 1 2 3 4 5 6 7 8 9 10 11
texto:   a a b c a a b x a a a  z
valor z: x 1 0 0 3 1 0 0 2 2 1  0
(long de subcadena, que es un prefijo)

Z[0]: * No importa
      * cualquier subcadena comenzando en 0 es prefijo de str
      * longitud variable: 0...N-1

Z[1]: * long de subcadena más larga y prefijo de str

* Algoritmo
#+begin_src python
def calcularValorZ(estring, Z):
    n = len(estring)  # O(N)
    L = 0
    R = 0
    k = 0

    for i in range(n):  # O(N) (este no vale)
        if i > R:
            L = i
            R = i
            while (R < n) and estring[R - L] == estring[
                R
            ]:  # O(N) (en el peor de los casos)
                R += 1
            Z[i] = R - L
            R -= 1
        else:
            k = i - L
            if Z[k] < (R - i + 1):
                Z[i] = Z[k]
            else:
                L = i
                while (
                    R < n and estring[R - L] == estring[R]
                ):  # O(N) (en el peor de los casos)
                    R += 1
                Z[i] = R - L
                R -= 1
#+end_src

* Análisis de Palindromos
** Pseudocodigo
complejidad de -> O(N^2)
ciclo (verificar caracter x caracter <-> indice k):  O(N) -> FOR(k=0, k<N,k +=1 )
    centro = caracter en posición k
    expansión

    ciclo( h-j <- centro (k) -> h+j): O(N) -> for ( j=1, j>= 0 and j<N, j +=1)
        if (texto[k-j] == texto[k +j ]) :
                sigue avanzando
            else:
                detener comparación
** Algoritmo
#+begin_src python
def palindromo(s):
    n = len(s)
    k = 0
    max_length = 0
    start_index = 0

    while k < n:
        j = 1
        while k - j >= 0 and k + j < n:
            if s[k - j] == s[k + j]:
                j += 1
            else:
                break

        if j > 1 and 2 * j - 1 > max_length:
            max_length = 2 * j - 1
            start_index = k - j + 1

        k += 1

    return start_index, start_index + max_length - 1
#+end_src

** Buscar
#+begin_src python
def buscar(texto, patron):
    supercadena = patron + "#" + texto

    l = len(supercadena)  # O(N)
    Z = [0] * l

    calcularValorZ(supercadena, Z)

    positions = []
    for i in range(l):
        if Z[i] == len(patron):
            positions.append(i - len(patron) - 1)

    return positions
#+end_src

** Encontrar subcadena
#+begin_src python
def encontrar_subcadena(texto, patron):
    m, n = len(patron), len(texto)

    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if patron[i - 1] == texto[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1

    max_length = max(dp[m])
    if max_length > 0:
        start_index = dp[m].index(max_length) - max_length + 1
        return start_index, start_index + max_length - 1
    else:
        return None, None
#+end_src

#+begin_src python
def analizar_contenido(transmission, mcode):
    with open(transmission, "r") as f_transmission:
        transmission_content = f_transmission.read().replace("\n", "")

    with open(mcode, "r") as f_mcode:
        mcode_content = f_mcode.read().replace("\n", "")

    start, end = encontrar_subcadena(transmission_content, mcode_content)

    if start is not None:
        start += 1
        end += 1
        print(f"true {start} {end}")
    else:
        print("false")
#+end_src

* Leer archivos y soluciones
#+begin_src python
def main():
    # Parte 1
    archivos_transmission = ["transmission1.txt", "transmission2.txt"]
    archivos_mcode = ["mcode1.txt", "mcode2.txt", "mcode3.txt"]

    for transmission in archivos_transmission:
        for mcode in archivos_mcode:
            analizar_contenido(transmission, mcode)

    # Parte 2
    for transmission in archivos_transmission:
        with open(transmission, "r") as f_transmission:
            transmission_content = f_transmission.read().replace("\n", "")

        start, end = palindromo(transmission_content)
        print(f"{start} {end}")

    # Parte 3
    with open(archivos_transmission[0], "r") as f_transmission1:
        transmission1_content = f_transmission1.read().replace("\n", "")

    with open(archivos_transmission[1], "r") as f_transmission2:
        transmission2_content = f_transmission2.read().replace("\n", "")

    positions = buscar(transmission1_content, transmission2_content)
    if positions:
        print(f"{positions[0] + 1} {positions[-1] + 1}")
    else:
        print("No se encontró substring común más largo")

main()
#+end_src
