#+title: Actividad Integradora 1
#+property: header-args :tangle ActividadI.py :session actividadi :results value silent

* Contenidos :toc:
- [[#parte-1][Parte 1]]
  - [[#implementacion][Implementacion]]
- [[#parte-2][Parte 2]]
  - [[#pseudocodigo][Pseudocodigo]]
  - [[#algoritmo][Algoritmo]]
- [[#parte-3][Parte 3]]
- [[#funcion-principal][Funcion principal]]

* Parte 1
El programa debe analizar si el contenido de los archivos mcode1.txt, mcode2.txt y mcode3.,txt están contenidos en los archivos transmission1.txt y transmission2.txt y desplegar un true o false si es que las secuencias de chars están contenidas o no. En caso de ser true, muestra true, seguido de exactamente un espacio, seguido de la posición en el archivo de transmissiónX.txt donde inicia el código de mcodeY.txt

** Implementacion
*** Funcion Z
*Complejidad O(N+M)*

Busqueda de patrones en un texto
- Patrón long M
- Patrón long N

Tradicional: O(NM)
    N~M --> O(N^2)
KMP: O(N+M) --> O(2N) =- O(N)

Función Z:
    * Guardar la longitud de la subcadena más larga comenzando en la posición i
    * La subcadena también es un prefijo de la cadena original


indice:  0 1 2 3 4 5 6 7 8 9 10 11
texto:   a a b c a a b x a a a  z
valor z: x 1 0 0 3 1 0 0 2 2 1  0
(long de subcadena, que es un prefijo)

Z[0]: * No importa
      * cualquier subcadena comenzando en 0 es prefijo de str
      * longitud variable: 0...N-1

Z[1]: * long de subcadena más larga y prefijo de str

*** Algoritmo
#+begin_src python
def calcularValorZ(estring, Z):
    n = len(estring)
    L, R = 0, 0
    k = 0

    for i in range(1, n):
        if i <= R:
            k = i - L
            if Z[k] < R - i + 1:
                Z[i] = Z[k]
            else:
                L = i
                while R < n and estring[R - L] == estring[R]:
                    R += 1
                Z[i] = R - L
                R -= 1
        else:
            L, R = i, i
            while R < n and estring[R - L] == estring[R]:
                R += 1
            Z[i] = R - L
            R -= 1
#+end_src

*** Funcion buscar()
#+begin_src python
def buscar(texto, patron):
    supercadena = patron + "#" + texto

    l = len(supercadena)
    Z = [0] * l
    calcularValorZ(supercadena, Z)

    for i in range(l):
        if Z[i] == len(patron):
            return True

    return False
#+end_src

* Parte 2
Suponiendo que el código malicioso tiene siempre código "espejeado" (palíndromos de chars), sería buena idea buscar este tipo de código en una transmisión. El programa después debe buscar si hay código "espejeado" dentro de los archivos de transmisión. (palíndromo a nivel chars, no meterse a nivel bits). El programa muestra en una sola linea dos enteros separados por un espacio correspondientes a la posición (iniciando en 1) en donde inicia y termina el código "espejeado" más largo (palíndromo) para cada archivo de transmisión. Puede asumirse que siempre se encontrará este tipo de código.

** Pseudocodigo
complejidad de -> O(N^2)
ciclo (verificar caracter x caracter <-> indice k):  O(N) -> FOR(k=0, k<N,k +=1 )
    centro = caracter en posición k
    expansión

    ciclo( h-j <- centro (k) -> h+j): O(N) -> for ( j=1, j>= 0 and j<N, j +=1)
        if (texto[k-j] == texto[k +j ]) :
                sigue avanzando
            else:
                detener comparación
** Algoritmo
#+begin_src python
def palindromo(s):
    n = len(s)
    k = 0
    max_length = 0
    start_index = 0

    while k < n:
        j = 1
        while k - j >= 0 and k + j < n:
            if s[k - j] == s[k + j]:
                j += 1
            else:
                break

        if j > 1 and 2 * j - 1 > max_length:
            max_length = 2 * j - 1
            start_index = k - j + 1

        k += 1

    return start_index, start_index + max_length - 1
#+end_src

* Parte 3
Finalmente el programa analiza que tan similares son los archivos de transmisión, y debe mostrar la posición inicial y la posición final (iniciando en 1) del primer archivo en donde se encuentra el substring más largo común entre ambos archivos de transmisión

#+begin_src python
def substring_mas_largo(str1, str2):
    len_str1 = len(str1)
    len_str2 = len(str2)
    result = 0
    end_index = 0

    # Matriz para almacenar la longitud de la subcadena común más larga
    matrix = [[0] * (len_str2 + 1) for _ in range(len_str1 + 1)]

    for i in range(len_str1 + 1):
        for j in range(len_str2 + 1):
            if i == 0 or j == 0:
                matrix[i][j] = 0
            elif str1[i - 1] == str2[j - 1]:
                matrix[i][j] = matrix[i - 1][j - 1] + 1
                if matrix[i][j] > result:
                    result = matrix[i][j]
                    end_index = i - 1
            else:
                matrix[i][j] = 0

    start_index = end_index - result + 1
    return start_index + 1, end_index + 1
#+end_src

* Funcion principal
#+begin_src python
def main():
    archivos_transmission = ["transmission1.txt", "transmission2.txt"]
    archivos_mcode = ["mcode1.txt", "mcode2.txt", "mcode3.txt"]

    print("Parte 1:")
    for transmission in archivos_transmission:
        for mcode in archivos_mcode:
            with open(transmission, "r") as f_transmission, open(mcode, "r") as f_mcode:
                transmission_content = f_transmission.read().replace("\n", "")
                mcode_content = f_mcode.read().replace("\n", "")

            if buscar(transmission_content, mcode_content):
                print(f"true {mcode} se encuentra en {transmission}")
            else:
                print(f"false {mcode} no se encuentra en {transmission}")

    print("\nParte 2:")
    for transmission in archivos_transmission:
        with open(transmission, "r") as f_transmission:
            transmission_content = f_transmission.read().replace("\n", "")

        start, end = palindromo(transmission_content)
        print(f"El código espejeado se encuentra entre los caracteres: {start} - {end}")

    print("\nParte 3:")
    with open(archivos_transmission[0], "r") as f_transmission1:
        transmission1_content = f_transmission1.read().replace("\n", "")

    with open(archivos_transmission[1], "r") as f_transmission2:
        transmission2_content = f_transmission2.read().replace("\n", "")

    start, end = substring_mas_largo(transmission1_content, transmission2_content)
    print(f"El substring más largo se puede observar entre {start} - {end} de transmission1")


main()
#+end_src
